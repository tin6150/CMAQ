  
C     ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
C     
C     Linear Algebra Data and Routines File
C     
C     Generated by KPP-2.1 symbolic chemistry Kinetics PreProcessor
C     (http://www.cs.vt.edu/~asandu/Software/KPP)
C     KPP is distributed under GPL, the general public licence
C     (http://www.gnu.org/copyleft/gpl.html)
C     (C) 1995-1997, V. Damian & A. Sandu, CGRER, Univ. Iowa
C     (C) 1997-2005, A. Sandu, Michigan Tech, Virginia Tech
C     With important contributions from:
C     M. Damian, Villanova University, USA
C     R. Sander, Max-Planck Institute for Chemistry, Mainz, Germany
C     
C     File                 : CMAQ_CB4_LinearAlgebra.f90
C     Time                 : Tue Apr 18 11:38:47 2006
C     Working directory    : /home/amir/Desktop/KPP/kpp-2.1
C     Equation file        : CMAQ_CB4.kpp
C     Output root filename : CMAQ_CB4
C     
C     ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~



      MODULE KPP_LINALG

      USE KPP_PARS
      USE KPP_JACOBIANSP

      IMPLICIT NONE

      CONTAINS


C     ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
C     
C     SPARSE_UTIL - SPARSE utility functions
C     Arguments :
C     
C     ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~


C     ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
      SUBROUTINE KppDecomp( JVS, IER )
C     ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
C     Sparse LU factorization
C     ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

      USE KPP_Pars
      USE KPP_JacobianSP

      INTEGER  :: IER
      REAL(kind=dp) :: JVS(340), W(36), a
      INTEGER  :: k, kk, j, jj

      a = 0. ! mz_rs_20050606
      IER = 0
      DO k=1,KPPNSP
         ! mz_rs_20050606: don't check if real value == 0
         ! IF ( JVS( LU_DIAG(k) ) .EQ. 0. ) THEN
         IF ( ABS(JVS(LU_DIAG(k))) < TINY(a) ) THEN
            IER = k
            RETURN
         END IF
         DO kk = LU_CROW(k), LU_CROW(k+1)-1
            W( LU_ICOL(kk) ) = JVS(kk)
         END DO
         DO kk = LU_CROW(k), LU_DIAG(k)-1
            j = LU_ICOL(kk)
            a = -W(j) / JVS( LU_DIAG(j) )
            W(j) = -a
            DO jj = LU_DIAG(j)+1, LU_CROW(j+1)-1
               W( LU_ICOL(jj) ) = W( LU_ICOL(jj) ) + a*JVS(jj)
            END DO
         END DO
         DO kk = LU_CROW(k), LU_CROW(k+1)-1
            JVS(kk) = W( LU_ICOL(kk) )
         END DO
      END DO
      
      END SUBROUTINE KppDecomp


C     ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
      SUBROUTINE KppDecompCmplx( JVS, IER )
C     ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
C     Sparse LU factorization, complex
C     ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

      USE KPP_Pars
      USE KPP_JacobianSP

      INTEGER  :: IER
      DOUBLE COMPLEX :: JVS(340), W(36), a
      INTEGER  :: k, kk, j, jj

      IER = 0
      DO k=1,KPPNSP
         IF ( JVS( LU_DIAG(k) ) .EQ. 0. ) THEN
            IER = k
            RETURN
         END IF
         DO kk = LU_CROW(k), LU_CROW(k+1)-1
            W( LU_ICOL(kk) ) = JVS(kk)
         END DO
         DO kk = LU_CROW(k), LU_DIAG(k)-1
            j = LU_ICOL(kk)
            a = -W(j) / JVS( LU_DIAG(j) )
            W(j) = -a
            DO jj = LU_DIAG(j)+1, LU_CROW(j+1)-1
               W( LU_ICOL(jj) ) = W( LU_ICOL(jj) ) + a*JVS(jj)
            END DO
         END DO
         DO kk = LU_CROW(k), LU_CROW(k+1)-1
            JVS(kk) = W( LU_ICOL(kk) )
         END DO
      END DO
      
      END SUBROUTINE KppDecompCmplx

C     ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
      SUBROUTINE KppSolveIndirect( JVS, X )
C     ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
C     Sparse solve subroutine using indirect addressing
C     ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

      USE KPP_Pars
      USE KPP_JacobianSP

      INTEGER i, j
      REAL(kind=dp) JVS(340), X(36), sum

      DO i=1,KPPNSP
         DO j = LU_CROW(i), LU_DIAG(i)-1 
            X(i) = X(i) - JVS(j)*X(LU_ICOL(j));
         END DO  
      END DO

      DO i=KPPNSP,1,-1
         sum = X(i);
         DO j = LU_DIAG(i)+1, LU_CROW(i+1)-1
            sum = sum - JVS(j)*X(LU_ICOL(j));
         END DO
         X(i) = sum/JVS(LU_DIAG(i));
      END DO
      
      END SUBROUTINE KppSolveIndirect

C     ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
      SUBROUTINE KppSolveCmplx( JVS, X )
C     ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
C     Complex sparse solve subroutine using indirect addressing
C     ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

      USE KPP_Pars
      USE KPP_JacobianSP

      INTEGER i, j
      DOUBLE COMPLEX JVS(340), X(36), sum

      DO i=1,KPPNSP
         DO j = LU_CROW(i), LU_DIAG(i)-1 
            X(i) = X(i) - JVS(j)*X(LU_ICOL(j));
         END DO  
      END DO

      DO i=KPPNSP,1,-1
         sum = X(i);
         DO j = LU_DIAG(i)+1, LU_CROW(i+1)-1
            sum = sum - JVS(j)*X(LU_ICOL(j));
         END DO
         X(i) = sum/JVS(LU_DIAG(i));
      END DO
      
      END SUBROUTINE KppSolveCmplx
C     End of SPARSE_UTIL function
C     ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~


C     ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
C     
C     KppSolve - sparse back substitution
C     Arguments :
C     JVS       - sparse Jacobian of variables
C     X         - Vector for variables
C     
C     ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

      SUBROUTINE KppSolve ( JVS, X )

C     JVS - sparse Jacobian of variables
      REAL(kind=dp) :: JVS(LU_NONZERO)
C     X - Vector for variables
      REAL(kind=dp) :: X(KPPNSP)

      X(13) = X(13)-JVS(44)*X(8)-JVS(45)*X(10)
      X(14) = X(14)-JVS(49)*X(9)
      X(16) = X(16)-JVS(62)*X(8)-JVS(63)*X(10)-JVS(64)*X(13)
      X(17) = X(17)-JVS(69)*X(10)
      X(18) = X(18)-JVS(75)*X(17)
      X(20) = X(20)-JVS(92)*X(13)-JVS(93)*X(16)
      X(21) = X(21)-JVS(99)*X(15)
      X(22) = X(22)-JVS(111)*X(8)-JVS(112)*X(10)-JVS(113)*X(15)-JVS(114)*X(16)-JVS(115)*X(17)-JVS(116)*X(19)-JVS(117)*X(20) 
     &     -JVS(118)*X(21)
      X(24) = X(24)-JVS(138)*X(10)-JVS(139)*X(15)-JVS(140)*X(23)
      X(25) = X(25)-JVS(149)*X(19)-JVS(150)*X(20)-JVS(151)*X(23)
      X(27) = X(27)-JVS(169)*X(26)
      X(28) = X(28)-JVS(176)*X(15)-JVS(177)*X(19)-JVS(178)*X(20)-JVS(179)*X(23)-JVS(180)*X(24)-JVS(181)*X(26)-JVS(182)*X(27)
      X(29) = X(29)-JVS(190)*X(6)-JVS(191)*X(17)-JVS(192)*X(20)-JVS(193)*X(26)-JVS(194)*X(27)-JVS(195)*X(28)
      X(30) = X(30)-JVS(204)*X(4)-JVS(205)*X(5)-JVS(206)*X(8)-JVS(207)*X(10)-JVS(208)*X(12)-JVS(209)*X(13)-JVS(210)*X(15) 
     &     -JVS(211)*X(16)-JVS(212)*X(17)-JVS(213)*X(18)-JVS(214)*X(19)-JVS(215)*X(20)-JVS(216)*X(21)-JVS(217)*X(22) 
     &     -JVS(218)*X(23)-JVS(219)*X(24)-JVS(220)*X(25)-JVS(221)*X(26)-JVS(222)*X(27)-JVS(223)*X(28)-JVS(224)*X(29)
      X(31) = X(31)-JVS(232)*X(3)-JVS(233)*X(4)-JVS(234)*X(5)-JVS(235)*X(8)-JVS(236)*X(10)-JVS(237)*X(11)-JVS(238)*X(12) 
     &     -JVS(239)*X(14)-JVS(240)*X(16)-JVS(241)*X(17)-JVS(242)*X(18)-JVS(243)*X(19)-JVS(244)*X(20)-JVS(245)*X(23) 
     &     -JVS(246)*X(24)-JVS(247)*X(25)-JVS(248)*X(26)-JVS(249)*X(27)-JVS(250)*X(28)-JVS(251)*X(29)-JVS(252)*X(30)
      X(32) = X(32)-JVS(259)*X(3)-JVS(260)*X(19)-JVS(261)*X(23)-JVS(262)*X(25)-JVS(263)*X(26)-JVS(264)*X(27)-JVS(265)*X(28) 
     &     -JVS(266)*X(29)-JVS(267)*X(30)-JVS(268)*X(31)
      X(33) = X(33)-JVS(274)*X(9)-JVS(275)*X(14)-JVS(276)*X(16)-JVS(277)*X(23)-JVS(278)*X(25)-JVS(279)*X(26)-JVS(280)*X(27) 
     &     -JVS(281)*X(28)-JVS(282)*X(29)-JVS(283)*X(30)-JVS(284)*X(31)-JVS(285)*X(32)
      X(34) = X(34)-JVS(290)*X(19)-JVS(291)*X(20)-JVS(292)*X(23)-JVS(293)*X(26)-JVS(294)*X(27)-JVS(295)*X(30)-JVS(296)*X(31) 
     &     -JVS(297)*X(32)-JVS(298)*X(33)
      X(35) = X(35)-JVS(302)*X(6)-JVS(303)*X(7)-JVS(304)*X(9)-JVS(305)*X(11)-JVS(306)*X(12)-JVS(307)*X(13)-JVS(308)*X(15) 
     &     -JVS(309)*X(16)-JVS(310)*X(22)-JVS(311)*X(23)-JVS(312)*X(24)-JVS(313)*X(26)-JVS(314)*X(27)-JVS(315)*X(28) 
     &     -JVS(316)*X(29)-JVS(317)*X(30)-JVS(318)*X(31)-JVS(319)*X(32)-JVS(320)*X(33)-JVS(321)*X(34)
      X(36) = X(36)-JVS(324)*X(11)-JVS(325)*X(13)-JVS(326)*X(21)-JVS(327)*X(22)-JVS(328)*X(23)-JVS(329)*X(24)-JVS(330)*X(26) 
     &     -JVS(331)*X(27)-JVS(332)*X(28)-JVS(333)*X(29)-JVS(334)*X(30)-JVS(335)*X(31)-JVS(336)*X(32)-JVS(337)*X(33) 
     &     -JVS(338)*X(34)-JVS(339)*X(35)
      X(36) = X(36)/JVS(340)
      X(35) = (X(35)-JVS(323)*X(36))/(JVS(322))
      X(34) = (X(34)-JVS(300)*X(35)-JVS(301)*X(36))/(JVS(299))
      X(33) = (X(33)-JVS(287)*X(34)-JVS(288)*X(35)-JVS(289)*X(36))/(JVS(286))
      X(32) = (X(32)-JVS(270)*X(33)-JVS(271)*X(34)-JVS(272)*X(35)-JVS(273)*X(36))/(JVS(269))
      X(31) = (X(31)-JVS(254)*X(32)-JVS(255)*X(33)-JVS(256)*X(34)-JVS(257)*X(35)-JVS(258)*X(36))/(JVS(253))
      X(30) = (X(30)-JVS(226)*X(31)-JVS(227)*X(32)-JVS(228)*X(33)-JVS(229)*X(34)-JVS(230)*X(35)-JVS(231)*X(36))/(JVS(225))
      X(29) = (X(29)-JVS(197)*X(30)-JVS(198)*X(31)-JVS(199)*X(32)-JVS(200)*X(33)-JVS(201)*X(34)-JVS(202)*X(35)-JVS(203) 
     &     *X(36))/(JVS(196))
      X(28) = (X(28)-JVS(184)*X(31)-JVS(185)*X(32)-JVS(186)*X(33)-JVS(187)*X(34)-JVS(188)*X(35)-JVS(189)*X(36))/(JVS(183))
      X(27) = (X(27)-JVS(171)*X(31)-JVS(172)*X(32)-JVS(173)*X(33)-JVS(174)*X(34)-JVS(175)*X(35))/(JVS(170))
      X(26) = (X(26)-JVS(164)*X(31)-JVS(165)*X(32)-JVS(166)*X(33)-JVS(167)*X(34)-JVS(168)*X(35))/(JVS(163))
      X(25) = (X(25)-JVS(153)*X(26)-JVS(154)*X(27)-JVS(155)*X(28)-JVS(156)*X(29)-JVS(157)*X(30)-JVS(158)*X(31)-JVS(159) 
     &     *X(32)-JVS(160)*X(33)-JVS(161)*X(34)-JVS(162)*X(36))/(JVS(152))
      X(24) = (X(24)-JVS(142)*X(26)-JVS(143)*X(27)-JVS(144)*X(31)-JVS(145)*X(32)-JVS(146)*X(33)-JVS(147)*X(34)-JVS(148) 
     &     *X(35))/(JVS(141))
      X(23) = (X(23)-JVS(134)*X(31)-JVS(135)*X(32)-JVS(136)*X(33)-JVS(137)*X(34))/(JVS(133))
      X(22) = (X(22)-JVS(120)*X(23)-JVS(121)*X(24)-JVS(122)*X(26)-JVS(123)*X(27)-JVS(124)*X(28)-JVS(125)*X(29)-JVS(126) 
     &     *X(30)-JVS(127)*X(31)-JVS(128)*X(32)-JVS(129)*X(33)-JVS(130)*X(34)-JVS(131)*X(35)-JVS(132)*X(36))/(JVS(119))
      X(21) = (X(21)-JVS(101)*X(22)-JVS(102)*X(23)-JVS(103)*X(24)-JVS(104)*X(26)-JVS(105)*X(30)-JVS(106)*X(31)-JVS(107) 
     &     *X(32)-JVS(108)*X(33)-JVS(109)*X(35)-JVS(110)*X(36))/(JVS(100))
      X(20) = (X(20)-JVS(95)*X(31)-JVS(96)*X(33)-JVS(97)*X(34)-JVS(98)*X(36))/(JVS(94))
      X(19) = (X(19)-JVS(89)*X(31)-JVS(90)*X(32)-JVS(91)*X(34))/(JVS(88))
      X(18) = (X(18)-JVS(77)*X(19)-JVS(78)*X(20)-JVS(79)*X(23)-JVS(80)*X(25)-JVS(81)*X(26)-JVS(82)*X(27)-JVS(83)*X(28) 
     &     -JVS(84)*X(31)-JVS(85)*X(32)-JVS(86)*X(33)-JVS(87)*X(34))/(JVS(76))
      X(17) = (X(17)-JVS(71)*X(20)-JVS(72)*X(27)-JVS(73)*X(31)-JVS(74)*X(34))/(JVS(70))
      X(16) = (X(16)-JVS(66)*X(31)-JVS(67)*X(33)-JVS(68)*X(36))/(JVS(65))
      X(15) = (X(15)-JVS(59)*X(24)-JVS(60)*X(31)-JVS(61)*X(35))/(JVS(58))
      X(14) = (X(14)-JVS(51)*X(16)-JVS(52)*X(25)-JVS(53)*X(27)-JVS(54)*X(28)-JVS(55)*X(31)-JVS(56)*X(33)-JVS(57)*X(35)) 
     &     /(JVS(50))
      X(13) = (X(13)-JVS(47)*X(31)-JVS(48)*X(36))/(JVS(46))
      X(12) = (X(12)-JVS(41)*X(30)-JVS(42)*X(31)-JVS(43)*X(35))/(JVS(40))
      X(11) = (X(11)-JVS(37)*X(31)-JVS(38)*X(35)-JVS(39)*X(36))/(JVS(36))
      X(10) = (X(10)-JVS(35)*X(31))/(JVS(34))
      X(9) = (X(9)-JVS(32)*X(33)-JVS(33)*X(35))/(JVS(31))
      X(8) = (X(8)-JVS(30)*X(31))/(JVS(29))
      X(7) = (X(7)-JVS(25)*X(16)-JVS(26)*X(31)-JVS(27)*X(33)-JVS(28)*X(35))/(JVS(24))
      X(6) = (X(6)-JVS(22)*X(29)-JVS(23)*X(35))/(JVS(21))
      X(5) = (X(5)-JVS(19)*X(30)-JVS(20)*X(31))/(JVS(18))
      X(4) = (X(4)-JVS(17)*X(31))/(JVS(16))
      X(3) = (X(3)-JVS(15)*X(34))/(JVS(14))
      X(2) = (X(2)-JVS(12)*X(4)-JVS(13)*X(31))/(JVS(11))
      X(1) = (X(1)-JVS(2)*X(7)-JVS(3)*X(13)-JVS(4)*X(15)-JVS(5)*X(21)-JVS(6)*X(26)-JVS(7)*X(27)-JVS(8)*X(33)-JVS(9)*X(35) 
     &     -JVS(10)*X(36))/(JVS(1))
      
      END SUBROUTINE KppSolve

C     End of KppSolve function
C     ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~


C     ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
C     
C     KppSolveTR - sparse, transposed back substitution
C     Arguments :
C     JVS       - sparse Jacobian of variables
C     X         - Vector for variables
C     XX        - Vector for output variables
C     
C     ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

      SUBROUTINE KppSolveTR ( JVS, X, XX )

C     JVS - sparse Jacobian of variables
      REAL(kind=dp) :: JVS(LU_NONZERO)
C     X - Vector for variables
      REAL(kind=dp) :: X(KPPNSP)
C     XX - Vector for output variables
      REAL(kind=dp) :: XX(KPPNSP)

      XX(1) = X(1)/JVS(1)
      XX(2) = X(2)/JVS(11)
      XX(3) = X(3)/JVS(14)
      XX(4) = (X(4)-JVS(12)*XX(2))/(JVS(16))
      XX(5) = X(5)/JVS(18)
      XX(6) = X(6)/JVS(21)
      XX(7) = (X(7)-JVS(2)*XX(1))/(JVS(24))
      XX(8) = X(8)/JVS(29)
      XX(9) = X(9)/JVS(31)
      XX(10) = X(10)/JVS(34)
      XX(11) = X(11)/JVS(36)
      XX(12) = X(12)/JVS(40)
      XX(13) = (X(13)-JVS(3)*XX(1))/(JVS(46))
      XX(14) = X(14)/JVS(50)
      XX(15) = (X(15)-JVS(4)*XX(1))/(JVS(58))
      XX(16) = (X(16)-JVS(25)*XX(7)-JVS(51)*XX(14))/(JVS(65))
      XX(17) = X(17)/JVS(70)
      XX(18) = X(18)/JVS(76)
      XX(19) = (X(19)-JVS(77)*XX(18))/(JVS(88))
      XX(20) = (X(20)-JVS(71)*XX(17)-JVS(78)*XX(18))/(JVS(94))
      XX(21) = (X(21)-JVS(5)*XX(1))/(JVS(100))
      XX(22) = (X(22)-JVS(101)*XX(21))/(JVS(119))
      XX(23) = (X(23)-JVS(79)*XX(18)-JVS(102)*XX(21)-JVS(120)*XX(22))/(JVS(133))
      XX(24) = (X(24)-JVS(59)*XX(15)-JVS(103)*XX(21)-JVS(121)*XX(22))/(JVS(141))
      XX(25) = (X(25)-JVS(52)*XX(14)-JVS(80)*XX(18))/(JVS(152))
      XX(26) = (X(26)-JVS(6)*XX(1)-JVS(81)*XX(18)-JVS(104)*XX(21)-JVS(122)*XX(22)-JVS(142)*XX(24)-JVS(153)*XX(25)) 
     &     /(JVS(163))
      XX(27) = (X(27)-JVS(7)*XX(1)-JVS(53)*XX(14)-JVS(72)*XX(17)-JVS(82)*XX(18)-JVS(123)*XX(22)-JVS(143)*XX(24)-JVS(154) 
     &     *XX(25))/(JVS(170))
      XX(28) = (X(28)-JVS(54)*XX(14)-JVS(83)*XX(18)-JVS(124)*XX(22)-JVS(155)*XX(25))/(JVS(183))
      XX(29) = (X(29)-JVS(22)*XX(6)-JVS(125)*XX(22)-JVS(156)*XX(25))/(JVS(196))
      XX(30) = (X(30)-JVS(19)*XX(5)-JVS(41)*XX(12)-JVS(105)*XX(21)-JVS(126)*XX(22)-JVS(157)*XX(25)-JVS(197)*XX(29)) 
     &     /(JVS(225))
      XX(31) = (X(31)-JVS(13)*XX(2)-JVS(17)*XX(4)-JVS(20)*XX(5)-JVS(26)*XX(7)-JVS(30)*XX(8)-JVS(35)*XX(10)-JVS(37)*XX(11) 
     &     -JVS(42)*XX(12)-JVS(47)*XX(13)-JVS(55)*XX(14)-JVS(60)*XX(15)-JVS(66)*XX(16)-JVS(73)*XX(17)-JVS(84)*XX(18) 
     &     -JVS(89)*XX(19)-JVS(95)*XX(20)-JVS(106)*XX(21)-JVS(127)*XX(22)-JVS(134)*XX(23)-JVS(144)*XX(24)-JVS(158)*XX(25) 
     &     -JVS(164)*XX(26)-JVS(171)*XX(27)-JVS(184)*XX(28)-JVS(198)*XX(29)-JVS(226)*XX(30))/(JVS(253))
      XX(32) = (X(32)-JVS(85)*XX(18)-JVS(90)*XX(19)-JVS(107)*XX(21)-JVS(128)*XX(22)-JVS(135)*XX(23)-JVS(145)*XX(24)-JVS(159) 
     &     *XX(25)-JVS(165)*XX(26)-JVS(172)*XX(27)-JVS(185)*XX(28)-JVS(199)*XX(29)-JVS(227)*XX(30)-JVS(254)*XX(31)) 
     &     /(JVS(269))
      XX(33) = (X(33)-JVS(8)*XX(1)-JVS(27)*XX(7)-JVS(32)*XX(9)-JVS(56)*XX(14)-JVS(67)*XX(16)-JVS(86)*XX(18)-JVS(96)*XX(20) 
     &     -JVS(108)*XX(21)-JVS(129)*XX(22)-JVS(136)*XX(23)-JVS(146)*XX(24)-JVS(160)*XX(25)-JVS(166)*XX(26)-JVS(173) 
     &     *XX(27)-JVS(186)*XX(28)-JVS(200)*XX(29)-JVS(228)*XX(30)-JVS(255)*XX(31)-JVS(270)*XX(32))/(JVS(286))
      XX(34) = (X(34)-JVS(15)*XX(3)-JVS(74)*XX(17)-JVS(87)*XX(18)-JVS(91)*XX(19)-JVS(97)*XX(20)-JVS(130)*XX(22)-JVS(137) 
     &     *XX(23)-JVS(147)*XX(24)-JVS(161)*XX(25)-JVS(167)*XX(26)-JVS(174)*XX(27)-JVS(187)*XX(28)-JVS(201)*XX(29) 
     &     -JVS(229)*XX(30)-JVS(256)*XX(31)-JVS(271)*XX(32)-JVS(287)*XX(33))/(JVS(299))
      XX(35) = (X(35)-JVS(9)*XX(1)-JVS(23)*XX(6)-JVS(28)*XX(7)-JVS(33)*XX(9)-JVS(38)*XX(11)-JVS(43)*XX(12)-JVS(57)*XX(14) 
     &     -JVS(61)*XX(15)-JVS(109)*XX(21)-JVS(131)*XX(22)-JVS(148)*XX(24)-JVS(168)*XX(26)-JVS(175)*XX(27)-JVS(188) 
     &     *XX(28)-JVS(202)*XX(29)-JVS(230)*XX(30)-JVS(257)*XX(31)-JVS(272)*XX(32)-JVS(288)*XX(33)-JVS(300)*XX(34)) 
     &     /(JVS(322))
      XX(36) = (X(36)-JVS(10)*XX(1)-JVS(39)*XX(11)-JVS(48)*XX(13)-JVS(68)*XX(16)-JVS(98)*XX(20)-JVS(110)*XX(21)-JVS(132) 
     &     *XX(22)-JVS(162)*XX(25)-JVS(189)*XX(28)-JVS(203)*XX(29)-JVS(231)*XX(30)-JVS(258)*XX(31)-JVS(273)*XX(32) 
     &     -JVS(289)*XX(33)-JVS(301)*XX(34)-JVS(323)*XX(35))/(JVS(340))
      XX(36) = XX(36)
      XX(35) = XX(35)-JVS(339)*XX(36)
      XX(34) = XX(34)-JVS(321)*XX(35)-JVS(338)*XX(36)
      XX(33) = XX(33)-JVS(298)*XX(34)-JVS(320)*XX(35)-JVS(337)*XX(36)
      XX(32) = XX(32)-JVS(285)*XX(33)-JVS(297)*XX(34)-JVS(319)*XX(35)-JVS(336)*XX(36)
      XX(31) = XX(31)-JVS(268)*XX(32)-JVS(284)*XX(33)-JVS(296)*XX(34)-JVS(318)*XX(35)-JVS(335)*XX(36)
      XX(30) = XX(30)-JVS(252)*XX(31)-JVS(267)*XX(32)-JVS(283)*XX(33)-JVS(295)*XX(34)-JVS(317)*XX(35)-JVS(334)*XX(36)
      XX(29) = XX(29)-JVS(224)*XX(30)-JVS(251)*XX(31)-JVS(266)*XX(32)-JVS(282)*XX(33)-JVS(316)*XX(35)-JVS(333)*XX(36)
      XX(28) = XX(28)-JVS(195)*XX(29)-JVS(223)*XX(30)-JVS(250)*XX(31)-JVS(265)*XX(32)-JVS(281)*XX(33)-JVS(315)*XX(35) 
     &     -JVS(332)*XX(36)
      XX(27) = XX(27)-JVS(182)*XX(28)-JVS(194)*XX(29)-JVS(222)*XX(30)-JVS(249)*XX(31)-JVS(264)*XX(32)-JVS(280)*XX(33) 
     &     -JVS(294)*XX(34)-JVS(314)*XX(35)-JVS(331)*XX(36)
      XX(26) = XX(26)-JVS(169)*XX(27)-JVS(181)*XX(28)-JVS(193)*XX(29)-JVS(221)*XX(30)-JVS(248)*XX(31)-JVS(263)*XX(32) 
     &     -JVS(279)*XX(33)-JVS(293)*XX(34)-JVS(313)*XX(35)-JVS(330)*XX(36)
      XX(25) = XX(25)-JVS(220)*XX(30)-JVS(247)*XX(31)-JVS(262)*XX(32)-JVS(278)*XX(33)
      XX(24) = XX(24)-JVS(180)*XX(28)-JVS(219)*XX(30)-JVS(246)*XX(31)-JVS(312)*XX(35)-JVS(329)*XX(36)
      XX(23) = XX(23)-JVS(140)*XX(24)-JVS(151)*XX(25)-JVS(179)*XX(28)-JVS(218)*XX(30)-JVS(245)*XX(31)-JVS(261)*XX(32) 
     &     -JVS(277)*XX(33)-JVS(292)*XX(34)-JVS(311)*XX(35)-JVS(328)*XX(36)
      XX(22) = XX(22)-JVS(217)*XX(30)-JVS(310)*XX(35)-JVS(327)*XX(36)
      XX(21) = XX(21)-JVS(118)*XX(22)-JVS(216)*XX(30)-JVS(326)*XX(36)
      XX(20) = XX(20)-JVS(117)*XX(22)-JVS(150)*XX(25)-JVS(178)*XX(28)-JVS(192)*XX(29)-JVS(215)*XX(30)-JVS(244)*XX(31) 
     &     -JVS(291)*XX(34)
      XX(19) = XX(19)-JVS(116)*XX(22)-JVS(149)*XX(25)-JVS(177)*XX(28)-JVS(214)*XX(30)-JVS(243)*XX(31)-JVS(260)*XX(32) 
     &     -JVS(290)*XX(34)
      XX(18) = XX(18)-JVS(213)*XX(30)-JVS(242)*XX(31)
      XX(17) = XX(17)-JVS(75)*XX(18)-JVS(115)*XX(22)-JVS(191)*XX(29)-JVS(212)*XX(30)-JVS(241)*XX(31)
      XX(16) = XX(16)-JVS(93)*XX(20)-JVS(114)*XX(22)-JVS(211)*XX(30)-JVS(240)*XX(31)-JVS(276)*XX(33)-JVS(309)*XX(35)
      XX(15) = XX(15)-JVS(99)*XX(21)-JVS(113)*XX(22)-JVS(139)*XX(24)-JVS(176)*XX(28)-JVS(210)*XX(30)-JVS(308)*XX(35)
      XX(14) = XX(14)-JVS(239)*XX(31)-JVS(275)*XX(33)
      XX(13) = XX(13)-JVS(64)*XX(16)-JVS(92)*XX(20)-JVS(209)*XX(30)-JVS(307)*XX(35)-JVS(325)*XX(36)
      XX(12) = XX(12)-JVS(208)*XX(30)-JVS(238)*XX(31)-JVS(306)*XX(35)
      XX(11) = XX(11)-JVS(237)*XX(31)-JVS(305)*XX(35)-JVS(324)*XX(36)
      XX(10) = XX(10)-JVS(45)*XX(13)-JVS(63)*XX(16)-JVS(69)*XX(17)-JVS(112)*XX(22)-JVS(138)*XX(24)-JVS(207)*XX(30)-JVS(236) 
     &     *XX(31)
      XX(9) = XX(9)-JVS(49)*XX(14)-JVS(274)*XX(33)-JVS(304)*XX(35)
      XX(8) = XX(8)-JVS(44)*XX(13)-JVS(62)*XX(16)-JVS(111)*XX(22)-JVS(206)*XX(30)-JVS(235)*XX(31)
      XX(7) = XX(7)-JVS(303)*XX(35)
      XX(6) = XX(6)-JVS(190)*XX(29)-JVS(302)*XX(35)
      XX(5) = XX(5)-JVS(205)*XX(30)-JVS(234)*XX(31)
      XX(4) = XX(4)-JVS(204)*XX(30)-JVS(233)*XX(31)
      XX(3) = XX(3)-JVS(232)*XX(31)-JVS(259)*XX(32)
      XX(2) = XX(2)
      XX(1) = XX(1)
      
      END SUBROUTINE KppSolveTR

C     End of KppSolveTR function
C     ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~


C     ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
C     
C     BLAS_UTIL - BLAS-LIKE utility functions
C     Arguments :
C     
C     ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

C--------------------------------------------------------------
C     
C     BLAS/LAPACK-like subroutines used by the integration algorithms
C     It is recommended to replace them by calls to the optimized
C     BLAS/LAPACK library for your machine
C     
C     (C) Adrian Sandu, Aug. 2004
C     Virginia Polytechnic Institute and State University
C--------------------------------------------------------------


C--------------------------------------------------------------
      SUBROUTINE WCOPY(N,X,incX,Y,incY)
C--------------------------------------------------------------
C     copies a vector, x, to a vector, y:  y <- x
C     only for incX=incY=1
C     after BLAS
C     replace this by the function from the optimized BLAS implementation:
C     CALL  SCOPY(N,X,1,Y,1)   or   CALL  DCOPY(N,X,1,Y,1)
C--------------------------------------------------------------
C     USE CMAQ_CB4_Precision
      
      INTEGER i,incX,incY,M,MP1,N
      REAL(kind=dp) X(N),Y(N)

      IF (N.LE.0) RETURN

      M = MOD(N,8)
      IF( M .NE. 0 ) THEN
         DO i = 1,M
            Y(i) = X(i)
         END DO
         IF( N .LT. 8 ) RETURN
      END IF    
      MP1 = M+1
      DO i = MP1,N,8
         Y(i) = X(i)
         Y(i + 1) = X(i + 1)
         Y(i + 2) = X(i + 2)
         Y(i + 3) = X(i + 3)
         Y(i + 4) = X(i + 4)
         Y(i + 5) = X(i + 5)
         Y(i + 6) = X(i + 6)
         Y(i + 7) = X(i + 7)
      END DO

      END SUBROUTINE WCOPY


C--------------------------------------------------------------
      SUBROUTINE WAXPY(N,Alpha,X,incX,Y,incY)
C--------------------------------------------------------------
C     constant times a vector plus a vector: y <- y + Alpha*x
C     only for incX=incY=1
C     after BLAS
C     replace this by the function from the optimized BLAS implementation:
C     CALL SAXPY(N,Alpha,X,1,Y,1) or  CALL DAXPY(N,Alpha,X,1,Y,1)
C--------------------------------------------------------------
C     USE CMAQ_CB4_Precision

      INTEGER i,incX,incY,M,MP1,N
      REAL(kind=dp) X(N),Y(N),Alpha
      REAL(kind=dp) ZERO
      PARAMETER( ZERO = 0.0_dp )

      IF (Alpha .EQ. ZERO) RETURN
      IF (N .LE. 0) RETURN

      M = MOD(N,4)
      IF( M .NE. 0 ) THEN
         DO i = 1,M
            Y(i) = Y(i) + Alpha*X(i)
         END DO
         IF( N .LT. 4 ) RETURN
      END IF
      MP1 = M + 1
      DO i = MP1,N,4
         Y(i) = Y(i) + Alpha*X(i)
         Y(i + 1) = Y(i + 1) + Alpha*X(i + 1)
         Y(i + 2) = Y(i + 2) + Alpha*X(i + 2)
         Y(i + 3) = Y(i + 3) + Alpha*X(i + 3)
      END DO
      
      END SUBROUTINE WAXPY



C--------------------------------------------------------------
      SUBROUTINE WSCAL(N,Alpha,X,incX)
C--------------------------------------------------------------
C     constant times a vector: x(1:N) <- Alpha*x(1:N) 
C     only for incX=incY=1
C     after BLAS
C     replace this by the function from the optimized BLAS implementation:
C     CALL SSCAL(N,Alpha,X,1) or  CALL DSCAL(N,Alpha,X,1)
C--------------------------------------------------------------
C     USE CMAQ_CB4_Precision

      INTEGER i,incX,M,MP1,N
      REAL(kind=dp) X(N),Alpha
      REAL(kind=dp) ZERO, ONE
      PARAMETER( ZERO = 0.0_dp ) 
      PARAMETER( ONE  = 1.0_dp )

      IF (Alpha .EQ. ONE) RETURN
      IF (N .LE. 0) RETURN

      M = MOD(N,5)
      IF( M .NE. 0 ) THEN
         IF (Alpha .EQ. (-ONE)) THEN
            DO i = 1,M
               X(i) = -X(i)
            END DO
         ELSEIF (Alpha .EQ. ZERO) THEN
            DO i = 1,M
               X(i) = ZERO
            END DO
         ELSE
            DO i = 1,M
               X(i) = Alpha*X(i)
            END DO
         END IF
         IF( N .LT. 5 ) RETURN
      END IF
      MP1 = M + 1
      IF (Alpha .EQ. (-ONE)) THEN
         DO i = MP1,N,5
            X(i)     = -X(i)
            X(i + 1) = -X(i + 1)
            X(i + 2) = -X(i + 2)
            X(i + 3) = -X(i + 3)
            X(i + 4) = -X(i + 4)
         END DO
      ELSEIF (Alpha .EQ. ZERO) THEN
         DO i = MP1,N,5
            X(i)     = ZERO
            X(i + 1) = ZERO
            X(i + 2) = ZERO
            X(i + 3) = ZERO
            X(i + 4) = ZERO
         END DO
      ELSE
         DO i = MP1,N,5
            X(i)     = Alpha*X(i)
            X(i + 1) = Alpha*X(i + 1)
            X(i + 2) = Alpha*X(i + 2)
            X(i + 3) = Alpha*X(i + 3)
            X(i + 4) = Alpha*X(i + 4)
         END DO
      END IF

      END SUBROUTINE WSCAL

C--------------------------------------------------------------
      REAL(kind=dp) FUNCTION WLAMCH( C )
C--------------------------------------------------------------
C     returns epsilon machine
C     after LAPACK
C     replace this by the function from the optimized LAPACK implementation:
C     CALL SLAMCH('E') or CALL DLAMCH('E')
C--------------------------------------------------------------
C     USE CMAQ_CB4_Precision

      CHARACTER C
      INTEGER   i
      REAL(kind=dp)  ONE, HALF, Eps, Sum
      PARAMETER (ONE  = 1.0_dp)
      PARAMETER (HALF = 0.5_dp)
      LOGICAL   First
      SAVE     First, Eps
      DATA     First /.TRUE./
      
      IF (First) THEN
         First = .FALSE.
         Eps = HALF**(16)
         DO i = 17, 80
            Eps = Eps*HALF
            CALL WLAMCH_ADD(ONE,Eps,Sum)
            IF (Sum.LE.ONE) GOTO 10
         END DO
         PRINT*,'ERROR IN WLAMCH. EPS < ',Eps
         RETURN
 10      Eps = Eps*2
         i = i-1      
      END IF

      WLAMCH = Eps

      END FUNCTION WLAMCH
      
      SUBROUTINE WLAMCH_ADD( A, B, Sum )
C     USE CMAQ_CB4_Precision
      
      REAL(kind=dp) A, B, Sum
      Sum = A + B

      END SUBROUTINE WLAMCH_ADD
C--------------------------------------------------------------


C--------------------------------------------------------------
      SUBROUTINE SET2ZERO(N,Y)
C--------------------------------------------------------------
C     copies zeros into the vector y:  y <- 0
C     after BLAS
C--------------------------------------------------------------
      
      INTEGER ::  i,M,MP1,N
      REAL(kind=dp) ::  Y(N)
      REAL(kind=dp), PARAMETER :: ZERO = 0.0d0

      IF (N.LE.0) RETURN

      M = MOD(N,8)
      IF( M .NE. 0 ) THEN
         DO i = 1,M
            Y(i) = ZERO
         END DO
         IF( N .LT. 8 ) RETURN
      END IF    
      MP1 = M+1
      DO i = MP1,N,8
         Y(i)     = ZERO
         Y(i + 1) = ZERO
         Y(i + 2) = ZERO
         Y(i + 3) = ZERO
         Y(i + 4) = ZERO
         Y(i + 5) = ZERO
         Y(i + 6) = ZERO
         Y(i + 7) = ZERO
      END DO

      END SUBROUTINE SET2ZERO


C--------------------------------------------------------------
      REAL(kind=dp) FUNCTION WDOT (N, DX, incX, DY, incY) 
C--------------------------------------------------------------
C     dot produce: wdot = x(1:N)*y(1:N) 
C     only for incX=incY=1
C     after BLAS
C     replace this by the function from the optimized BLAS implementation:
C     CALL SDOT(N,X,1,Y,1) or  CALL DDOT(N,X,1,Y,1)
C--------------------------------------------------------------
C     USE messy_mecca_kpp_Precision
C--------------------------------------------------------------
      IMPLICIT NONE
      INTEGER :: N, incX, incY
      REAL(kind=dp) :: DX(N), DY(N) 

      INTEGER :: i, IX, IY, M, MP1, NS
      
      WDOT = 0.0D0 
      IF (N .LE. 0) RETURN 
      IF (incX .EQ. incY) IF (incX-1) 5,20,60 
C     
C     Code for unequal or nonpositive increments.                       
C     
 5    IX = 1 
      IY = 1 
      IF (incX .LT. 0) IX = (-N+1)*incX + 1 
      IF (incY .LT. 0) IY = (-N+1)*incY + 1 
      DO i = 1,N 
         WDOT = WDOT + DX(IX)*DY(IY) 
         IX = IX + incX 
         IY = IY + incY 
      END DO 
      RETURN 
C     
C     Code for both increments equal to 1.                              
C     
C     Clean-up loop so remaining vector length is a multiple of 5.      
C     
 20   M = MOD(N,5) 
      IF (M .EQ. 0) GO TO 40 
      DO i = 1,M 
         WDOT = WDOT + DX(i)*DY(i) 
      END DO 
      IF (N .LT. 5) RETURN 
 40   MP1 = M + 1 
      DO i = MP1,N,5 
         WDOT = WDOT + DX(i)*DY(i) + DX(i+1)*DY(i+1) + DX(i+2)*DY(i+2) + 
     &        DX(i+3)*DY(i+3) + DX(i+4)*DY(i+4)                   
      END DO 
      RETURN 
C     
C     Code for equal, positive, non-unit increments.                    
C     
 60   NS = N*incX 
      DO i = 1,NS,incX 
         WDOT = WDOT + DX(i)*DY(i) 
      END DO 

      END FUNCTION WDOT                                          
C     End of BLAS_UTIL function
C     ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~



      END MODULE KPP_LinAlg

