  

C     ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
C     
C     Numerical Integrator (Time-Stepping) File
C     
C     Generated by KPP-2.1 symbolic chemistry Kinetics PreProcessor
C     (http://www.cs.vt.edu/~asandu/Software/KPP)
C     KPP is distributed under GPL, the general public licence
C     (http://www.gnu.org/copyleft/gpl.html)
C     (C) 1995-1997, V. Damian & A. Sandu, CGRER, Univ. Iowa
C     (C) 1997-2005, A. Sandu, Michigan Tech, Virginia Tech
C     With important contributions from:
C     M. Damian, Villanova University, USA
C     R. Sander, Max-Planck Institute for Chemistry, Mainz, Germany
C     
C     File                 : KPP_Integrator.f90
C     Time                 : Tue Apr 18 11:38:47 2006
C     Working directory    : /home/amir/Desktop/KPP/kpp-2.1
C     Equation file        : CMAQ_CB4.kpp
C     Output root filename : CMAQ_CB4
C     
C     ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~


      MODULE KPP_INTEGRATOR

      USE KPP_PRECISION
      USE KPP_PARS
      USE KPP_FUNCTION
      USE KPP_GLOB
      USE KPP_LINALG
      USE KPP_JACOBIAN
      USE KPP_UTIL


      IMPLICIT NONE
      PUBLIC
      SAVE
C~~~  >  Statistics on the work performed by the Rosenbrock method
      INTEGER :: Nfun,Njac,Nstp,Nacc,Nrej,Ndec,Nsol,Nsng
      INTEGER, PARAMETER :: ifun=1, ijac=2, istp=3, iacc=4,  
     &     irej=5, idec=6, isol=7, isng=8, itexit=1, ihexit=2
      

                                ! description of the error numbers IERR
      CHARACTER(LEN=50), PARAMETER, DIMENSION(-8:1) :: IERR_NAMES = (/  
     &     'Matrix is repeatedly singular                     ', ! -8
     &     'Step size too small                               ', ! -7
     &     'No of steps exceeds maximum bound                 ', ! -6
     &     'Improper tolerance values                         ', ! -5
     &     'FacMin/FacMax/FacRej must be positive             ', ! -4
     &     'Hmin/Hmax/Hstart must be positive                 ', ! -3
     &     'Selected Rosenbrock method not implemented        ', ! -2
     &     'Improper value for maximal no of steps            ', ! -1
     &     '                                                  ', !  0 (not used)
     &     'Success                                           ' /) !  1
      
      CONTAINS
      
      SUBROUTINE INTEGRATE( VARU, RKI, CHEMSTEP, ATOL, RTOL,  
     &     ICNTRL_U, RCNTRL_U, ISTATUS_U, RSTATUS_U, IERR_U )

C     USE KPP_Pars
C     USE KPP_Glob
      IMPLICIT NONE

      REAL(kind=dp) :: TIN      ! Start Time
      REAL(kind=dp) :: TOUT     ! End Time
                                ! Optional input parameters and statistics
      INTEGER,  INTENT(IN),  OPTIONAL :: ICNTRL_U(20)
      REAL(kind=dp), INTENT(IN),  OPTIONAL :: RCNTRL_U(20)
      INTEGER,  INTENT(OUT), OPTIONAL :: ISTATUS_U(20)
      REAL(kind=dp), INTENT(OUT), OPTIONAL :: RSTATUS_U(20)
      INTEGER,  INTENT(OUT), OPTIONAL :: IERR_U

      INTEGER :: N_stp, N_acc, N_rej, N_sng
      SAVE N_stp, N_acc, N_rej, N_sng
      INTEGER :: i, IERR
      REAL(kind=dp) :: RCNTRL(20), RSTATUS(20)
      INTEGER :: ICNTRL(20), ISTATUS(20)
      REAL(kind=dp) :: VAR(KPPNSP), VARU(KPPNSP), RKI(KPPNRCT), CHEMSTEP
      REAL(kind=dp) :: ATOL(KPPNSP), RTOL(KPPNSP)

      ICNTRL(:)  = 0
      RCNTRL(:)  = 0.0_dp
      ISTATUS(:) = 0
      RSTATUS(:) = 0.0_dp

                                ! If optional parameters are given, and if they are >0, 
                                ! then they overwrite default settings. 
      IF (PRESENT(ICNTRL_U)) THEN
         WHERE(ICNTRL_U(:) > 0) ICNTRL(:) = ICNTRL_U(:)
         END IF
         IF (PRESENT(RCNTRL_U)) THEN
            WHERE(RCNTRL_U(:) > 0) RCNTRL(:) = RCNTRL_U(:)
            END IF

            ATOL(:)=1.0d-8      !15 
            RTOL(:)=1.0d-3      !6 
            icntrl(1)=1
            icntrl(3)=5
            rcntrl(3)=1.0d0

            TIN = 0.0d0
            TOUT = 0.0d0+CHEMSTEP

            CALL Shuffle_user2kpp ( VARU, VAR )

            CALL Rosenbrock(VAR,TIN,TOUT,    
     &           ATOL,RTOL,                 
     &           RCNTRL,ICNTRL,RSTATUS,ISTATUS,IERR,RKI)

            CALL Shuffle_kpp2user ( VAR, VARU )

            STEPMIN = RCNTRL(ihexit)
                                ! if optional parameters are given for output they to return information
            IF (PRESENT(ISTATUS_U)) ISTATUS_U(:) = ISTATUS(:)
            IF (PRESENT(RSTATUS_U)) RSTATUS_U(:) = RSTATUS(:)
            IF (PRESENT(IERR_U))    IERR_U       = IERR

            END SUBROUTINE INTEGRATE

C~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
      SUBROUTINE Rosenbrock(Y,Tstart,Tend,  
     &     AbsTol,RelTol,             
     &     RCNTRL,ICNTRL,RSTATUS,ISTATUS,IERR,RKI)
C~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

      IMPLICIT NONE

C~~~  >  Arguments
      REAL(kind=dp), INTENT(INOUT) :: Y(KPPNSP)
      REAL(kind=dp), INTENT(IN)   :: Tstart,Tend
      REAL(kind=dp), INTENT(IN)   :: AbsTol(KPPNSP),RelTol(KPPNSP)
      INTEGER, INTENT(IN)    :: ICNTRL(20)
      REAL(kind=dp), INTENT(IN)   :: RCNTRL(20)
      INTEGER, INTENT(INOUT) :: ISTATUS(20)
      REAL(kind=dp), INTENT(INOUT) :: RSTATUS(20)
      INTEGER, INTENT(OUT)   :: IERR
C~~~  >  The method parameters
      INTEGER, PARAMETER :: Smax = 6
      INTEGER  :: Method, ros_S
      REAL(kind=dp), DIMENSION(Smax) :: ros_M, ros_E, ros_Alpha, ros_Gamma
      REAL(kind=dp), DIMENSION(Smax*(Smax-1)/2) :: ros_A, ros_C
      REAL(kind=dp) :: ros_ELO
      LOGICAL, DIMENSION(Smax) :: ros_NewF
      CHARACTER(LEN=12) :: ros_Name
C~~~  >  Local variables
      REAL(kind=dp) :: Roundoff, FacMin, FacMax, FacRej, FacSafe
      REAL(kind=dp) :: Hmin, Hmax, Hstart, Hexit
      REAL(kind=dp) :: Texit
      INTEGER :: i, UplimTol, Max_no_steps
      LOGICAL :: Autonomous, VectorTol
C~~~  >   Parameters
      REAL(kind=dp), PARAMETER :: ZERO = 0.0_dp, ONE  = 1.0_dp
      REAL(kind=dp), PARAMETER :: DeltaMin = 1.0E-5_dp

      REAL(kind=dp) :: RKI(KPPNRCT)

C~~~  >  Initialize statistics
      Nfun = ISTATUS(ifun)
      Njac = ISTATUS(ijac)
      Nstp = ISTATUS(istp)
      Nacc = ISTATUS(iacc)
      Nrej = ISTATUS(irej)
      Ndec = ISTATUS(idec)
      Nsol = ISTATUS(isol)
      Nsng = ISTATUS(isng)

C~~~  >  Autonomous or time dependent ODE. Default is time dependent.
      Autonomous = .NOT.(ICNTRL(1) == 0)

C~~~  >  For Scalar tolerances (ICNTRL(2).NE.0)  the code uses AbsTol(1) and RelTol(1)
C     For Vector tolerances (ICNTRL(2) == 0) the code uses AbsTol(1:KPPNSP) and RelTol(1:KPPNSP)
      IF (ICNTRL(2) == 0) THEN
         VectorTol = .TRUE.
         UplimTol  = KPPNSP
      ELSE
         VectorTol = .FALSE.
         UplimTol  = 1
      END IF

C~~~  >  The particular Rosenbrock method chosen
      IF (ICNTRL(3) == 0) THEN
         Method = 4
      ELSEIF ( (ICNTRL(3) >= 1).AND.(ICNTRL(3) <= 5) ) THEN
         Method = ICNTRL(3)
      ELSE
         PRINT * , 'User-selected Rosenbrock method: ICNTRL(3)=', Method
         CALL ros_ErrorMsg(-2,Tstart,ZERO,IERR)
         RETURN
      END IF

C~~~  >   The maximum number of steps admitted
      IF (ICNTRL(4) == 0) THEN
         Max_no_steps = 100000
      ELSEIF (ICNTRL(4) > 0) THEN
         Max_no_steps=ICNTRL(4)
      ELSE
         PRINT * ,'User-selected max no. of steps: ICNTRL(4)=',ICNTRL(4)
         CALL ros_ErrorMsg(-1,Tstart,ZERO,IERR)
         RETURN
      END IF

C~~~  >  Unit roundoff (1+Roundoff>1)
      Roundoff = WLAMCH('E')

C~~~  >  Lower bound on the step size: (positive value)
      IF (RCNTRL(1) == ZERO) THEN
         Hmin = ZERO
      ELSEIF (RCNTRL(1) > ZERO) THEN
         Hmin = RCNTRL(1)
      ELSE
         PRINT * , 'User-selected Hmin: RCNTRL(1)=', RCNTRL(1)
         CALL ros_ErrorMsg(-3,Tstart,ZERO,IERR)
         RETURN
      END IF
C~~~  >  Upper bound on the step size: (positive value)
      IF (RCNTRL(2) == ZERO) THEN
         Hmax = ABS(Tend-Tstart)
      ELSEIF (RCNTRL(2) > ZERO) THEN
         Hmax = MIN(ABS(RCNTRL(2)),ABS(Tend-Tstart))
      ELSE
         PRINT * , 'User-selected Hmax: RCNTRL(2)=', RCNTRL(2)
         CALL ros_ErrorMsg(-3,Tstart,ZERO,IERR)
         RETURN
      END IF
C~~~  >  Starting step size: (positive value)
      IF (RCNTRL(3) == ZERO) THEN
         Hstart = MAX(Hmin,DeltaMin)
      ELSEIF (RCNTRL(3) > ZERO) THEN
         Hstart = MIN(ABS(RCNTRL(3)),ABS(Tend-Tstart))
      ELSE
         PRINT * , 'User-selected Hstart: RCNTRL(3)=', RCNTRL(3)
         CALL ros_ErrorMsg(-3,Tstart,ZERO,IERR)
         RETURN
      END IF
C~~~  >  Step size can be changed s.t.  FacMin < Hnew/Hexit < FacMax
      IF (RCNTRL(4) == ZERO) THEN
         FacMin = 0.2_dp
      ELSEIF (RCNTRL(4) > ZERO) THEN
         FacMin = RCNTRL(4)
      ELSE
         PRINT * , 'User-selected FacMin: RCNTRL(4)=', RCNTRL(4)
         CALL ros_ErrorMsg(-4,Tstart,ZERO,IERR)
         RETURN
      END IF
      IF (RCNTRL(5) == ZERO) THEN
         FacMax = 6.0_dp
      ELSEIF (RCNTRL(5) > ZERO) THEN
         FacMax = RCNTRL(5)
      ELSE
         PRINT * , 'User-selected FacMax: RCNTRL(5)=', RCNTRL(5)
         CALL ros_ErrorMsg(-4,Tstart,ZERO,IERR)
         RETURN
      END IF
C~~~  >   FacRej: Factor to decrease step after 2 succesive rejections
      IF (RCNTRL(6) == ZERO) THEN
         FacRej = 0.1_dp
      ELSEIF (RCNTRL(6) > ZERO) THEN
         FacRej = RCNTRL(6)
      ELSE
         PRINT * , 'User-selected FacRej: RCNTRL(6)=', RCNTRL(6)
         CALL ros_ErrorMsg(-4,Tstart,ZERO,IERR)
         RETURN
      END IF
C~~~  >   FacSafe: Safety Factor in the computation of new step size
      IF (RCNTRL(7) == ZERO) THEN
         FacSafe = 0.9_dp
      ELSEIF (RCNTRL(7) > ZERO) THEN
         FacSafe = RCNTRL(7)
      ELSE
         PRINT * , 'User-selected FacSafe: RCNTRL(7)=', RCNTRL(7)
         CALL ros_ErrorMsg(-4,Tstart,ZERO,IERR)
         RETURN
      END IF
C~~~  >  Check if tolerances are reasonable
      DO i=1,UplimTol
         IF ( (AbsTol(i) <= ZERO) .OR. (RelTol(i) <= 10.0_dp*Roundoff)  
     &        .OR. (RelTol(i) >= 1.0_dp) ) THEN
            PRINT * , ' AbsTol(',i,') = ',AbsTol(i)
            PRINT * , ' RelTol(',i,') = ',RelTol(i)
            CALL ros_ErrorMsg(-5,Tstart,ZERO,IERR)
            RETURN
         END IF
      END DO


C~~~  >   Initialize the particular Rosenbrock method
      SELECT CASE (Method)
      CASE (1)
         CALL Ros2(ros_S, ros_A, ros_C, ros_M, ros_E,    
     &        ros_Alpha, ros_Gamma, ros_NewF, ros_ELO, ros_Name)
      CASE (2)
         CALL Ros3(ros_S, ros_A, ros_C, ros_M, ros_E,    
     &        ros_Alpha, ros_Gamma, ros_NewF, ros_ELO, ros_Name)
      CASE (3)
         CALL Ros4(ros_S, ros_A, ros_C, ros_M, ros_E,    
     &        ros_Alpha, ros_Gamma, ros_NewF, ros_ELO, ros_Name)
      CASE (4)
         CALL Rodas3(ros_S, ros_A, ros_C, ros_M, ros_E,  
     &        ros_Alpha, ros_Gamma, ros_NewF, ros_ELO, ros_Name)
      CASE (5)
         CALL Rodas4(ros_S, ros_A, ros_C, ros_M, ros_E,  
     &        ros_Alpha, ros_Gamma, ros_NewF, ros_ELO, ros_Name)
      CASE DEFAULT
         PRINT * , 'Unknown Rosenbrock method: ICNTRL(4)=', Method
         CALL ros_ErrorMsg(-2,Tstart,ZERO,IERR)
         RETURN
      END SELECT
      
C~~~  >  CALL Rosenbrock method
      CALL ros_Integrator(Y,Tstart,Tend,Texit,       
     &     AbsTol, RelTol,                           
C     Rosenbrock method coefficients
     &     ros_S, ros_M, ros_E, ros_A, ros_C,        
     &     ros_Alpha, ros_Gamma, ros_ELO, ros_NewF,  
C     Integration parameters
     &     Autonomous, VectorTol, Max_no_steps,      
     &     Roundoff, Hmin, Hmax, Hstart, Hexit,      
     &     FacMin, FacMax, FacRej, FacSafe,          
C     Error indicator
     &     IERR, RKI)


C~~~  >  Collect run statistics
      ISTATUS(ifun) = Nfun
      ISTATUS(ijac) = Njac
      ISTATUS(istp) = Nstp
      ISTATUS(iacc) = Nacc
      ISTATUS(irej) = Nrej
      ISTATUS(idec) = Ndec
      ISTATUS(isol) = Nsol
      ISTATUS(isng) = Nsng
C~~~  > Last T and H
      RSTATUS(itexit) = Texit
      RSTATUS(ihexit) = Hexit

C~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
      CONTAINS !  SUBROUTINES internal to Rosenbrock
C~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

C~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
      SUBROUTINE ros_ErrorMsg(Code,T,H,IERR)
C~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
C     Handles all error messages
C~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

      REAL(kind=dp), INTENT(IN) :: T, H
      INTEGER, INTENT(IN)  :: Code
      INTEGER, INTENT(OUT) :: IERR

      IERR = Code
      PRINT * ,  
     &     'Forced exit from Rosenbrock due to the following error:'
      IF ((Code>=-8).AND.(Code<=-1)) THEN
         PRINT *, IERR_NAMES(Code)
      ELSE
         PRINT *, 'Unknown Error code: ', Code
      ENDIF

      PRINT *, "T=", T, "and H=", H

      END SUBROUTINE ros_ErrorMsg

C~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
      SUBROUTINE ros_Integrator (Y, Tstart, Tend, T,      
     &     AbsTol, RelTol,                           
C~~~  > Rosenbrock method coefficients
     &     ros_S, ros_M, ros_E, ros_A, ros_C,        
     &     ros_Alpha, ros_Gamma, ros_ELO, ros_NewF,  
C~~~  > Integration parameters
     &     Autonomous, VectorTol, Max_no_steps,      
     &     Roundoff, Hmin, Hmax, Hstart, Hexit,      
     &     FacMin, FacMax, FacRej, FacSafe,          
C~~~  > Error indicator
     &     IERR, RKI )
C~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
C     Template for the implementation of a generic Rosenbrock method
C     defined by ros_S (no of stages)
C     and its coefficients ros_{A,C,M,E,Alpha,Gamma}
C~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

C     USE KPP_Pars
C     USE KPP_LinAlg
      IMPLICIT NONE

C~~~  > Input: the initial condition at Tstart; Output: the solution at T
      REAL(kind=dp), INTENT(INOUT) :: Y(KPPNSP)
C~~~  > Input: integration interval
      REAL(kind=dp), INTENT(IN) :: Tstart,Tend
C~~~  > Output: time at which the solution is returned (T=Tend if success)
      REAL(kind=dp), INTENT(OUT) ::  T
C~~~  > Input: tolerances
      REAL(kind=dp), INTENT(IN) ::  AbsTol(KPPNSP), RelTol(KPPNSP)
C~~~  > Input: The Rosenbrock method parameters
      INTEGER, INTENT(IN) ::  ros_S
      REAL(kind=dp), INTENT(IN) :: ros_M(ros_S), ros_E(ros_S),   
     &     ros_Alpha(ros_S), ros_A(ros_S*(ros_S-1)/2),  
     &     ros_Gamma(ros_S), ros_C(ros_S*(ros_S-1)/2), ros_ELO
      LOGICAL, INTENT(IN) :: ros_NewF(ros_S)
C~~~  > Input: integration parameters
      LOGICAL, INTENT(IN) :: Autonomous, VectorTol
      REAL(kind=dp), INTENT(IN) :: Hstart, Hmin, Hmax
      INTEGER, INTENT(IN) :: Max_no_steps
      REAL(kind=dp), INTENT(IN) :: Roundoff, FacMin, FacMax, FacRej, FacSafe
C~~~  > Output: last accepted step
      REAL(kind=dp), INTENT(OUT) :: Hexit
C~~~  > Output: Error indicator
      INTEGER, INTENT(OUT) :: IERR
C     ~~~~ Local variables
      REAL(kind=dp) :: Ynew(KPPNSP), Fcn0(KPPNSP), Fcn(KPPNSP)
      REAL(kind=dp) :: K(KPPNSP*ros_S), dFdT(KPPNSP)
C     #ifdef FULL_ALGEBRA    
C     REAL(kind=dp) :: Jac0(KPPNSP,KPPNSP), Ghimj(KPPNSP,KPPNSP)
C     #else
      REAL(kind=dp) :: Jac0(LU_NONZERO), Ghimj(LU_NONZERO)
C     #endif
      REAL(kind=dp) :: H, Hnew, HC, HG, Fac, Tau
      REAL(kind=dp) :: Err, Yerr(KPPNSP)
      INTEGER :: Pivot(KPPNSP), Direction, ioffset, j, istage
      LOGICAL :: RejectLastH, RejectMoreH, Singular
C~~~  >  Local parameters
      REAL(kind=dp), PARAMETER :: ZERO = 0.0_dp, ONE  = 1.0_dp
      REAL(kind=dp), PARAMETER :: DeltaMin = 1.0E-5_dp

      REAL(kind=dp) :: RKI(KPPNRCT)
C~~~  >  Locally called functions
C     REAL(kind=dp) WLAMCH
C     EXTERNAL WLAMCH
C~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~


C~~~  >  Initial preparations
      T = Tstart
      Hexit = 0.0_dp
      H = MIN(Hstart,Hmax)
      IF (ABS(H) <= 10.0_dp*Roundoff) H = DeltaMin

      IF (Tend  >=  Tstart) THEN
         Direction = +1
      ELSE
         Direction = -1
      END IF

      RejectLastH=.FALSE.
      RejectMoreH=.FALSE.

C~~~  > Time loop begins below

      TimeLoop: DO WHILE ( (Direction > 0).AND.((T-Tend)+Roundoff <= ZERO)  
     &     .OR. (Direction < 0).AND.((Tend-T)+Roundoff <= ZERO) )

      IF ( Nstp > Max_no_steps ) THEN ! Too many steps
         CALL ros_ErrorMsg(-6,T,H,IERR)
         RETURN
      END IF
      IF ( ((T+0.1_dp*H) == T).OR.(H <= Roundoff) ) THEN ! Step size too small
         CALL ros_ErrorMsg(-7,T,H,IERR)
         RETURN
      END IF

C~~~  >  Limit H if necessary to avoid going beyond Tend
      Hexit = H
      H = MIN(H,ABS(Tend-T))

C~~~  >   Compute the function at current time
      CALL FunTemplate(Y,RKI,Fcn0)

C~~~  >  Compute the function derivative with respect to T
C     IF (.NOT.Autonomous) THEN
C     CALL ros_FunTimeDerivative ( T, Roundoff, Y,  
C     Fcn0, dFdT )
C     END IF

C~~~  >   Compute the Jacobian at current time
      CALL JacTemplate(Y,RKI,Jac0)

C~~~  >  Repeat step calculation until current step accepted
      UntilAccepted: DO

      CALL ros_PrepareMatrix(H,Direction,ros_Gamma(1),  
     &     Jac0,Ghimj,Pivot,Singular)
      IF (Singular) THEN        ! More than 5 consecutive failed decompositions
         CALL ros_ErrorMsg(-8,T,H,IERR)
         RETURN
      END IF

C~~~  >   Compute the stages
      Stage: DO istage = 1, ros_S

                                ! Current istage offset. Current istage vector is K(ioffset+1:ioffset+KPPNSP)
      ioffset = KPPNSP*(istage-1)

                                ! For the 1st istage the function has been computed previously
      IF ( istage == 1 ) THEN
         CALL WCOPY(KPPNSP,Fcn0,1,Fcn,1)
                                ! istage>1 and a new function evaluation is needed at the current istage
      ELSEIF ( ros_NewF(istage) ) THEN
         CALL WCOPY(KPPNSP,Y,1,Ynew,1)
         DO j = 1, istage-1
            CALL WAXPY(KPPNSP,ros_A((istage-1)*(istage-2)/2+j),  
     &           K(KPPNSP*(j-1)+1),1,Ynew,1)
         END DO
         Tau = T + ros_Alpha(istage)*Direction*H
         CALL FunTemplate(Ynew,RKI,Fcn)
      END IF                    ! if istage == 1 elseif ros_NewF(istage)
      CALL WCOPY(KPPNSP,Fcn,1,K(ioffset+1),1)
      DO j = 1, istage-1
         HC = ros_C((istage-1)*(istage-2)/2+j)/(Direction*H)
         CALL WAXPY(KPPNSP,HC,K(KPPNSP*(j-1)+1),1,K(ioffset+1),1)
      END DO
      IF ((.NOT. Autonomous).AND.(ros_Gamma(istage).NE.ZERO)) THEN
         HG = Direction*H*ros_Gamma(istage)
         CALL WAXPY(KPPNSP,HG,dFdT,1,K(ioffset+1),1)
      END IF
      CALL ros_Solve(Ghimj, Pivot, K(ioffset+1))

      END DO Stage


C~~~  >  Compute the new solution
      CALL WCOPY(KPPNSP,Y,1,Ynew,1)
      DO j=1,ros_S
         CALL WAXPY(KPPNSP,ros_M(j),K(KPPNSP*(j-1)+1),1,Ynew,1)
      END DO

C~~~  >  Compute the error estimation
      CALL WSCAL(KPPNSP,ZERO,Yerr,1)
      DO j=1,ros_S
         CALL WAXPY(KPPNSP,ros_E(j),K(KPPNSP*(j-1)+1),1,Yerr,1)
      END DO
      Err = ros_ErrorNorm ( Y, Ynew, Yerr, AbsTol, RelTol, VectorTol )

C~~~  > New step size is bounded by FacMin <= Hnew/H <= FacMax
      Fac  = MIN(FacMax,MAX(FacMin,FacSafe/Err**(ONE/ros_ELO)))
      Hnew = H*Fac

C~~~  >  Check the error magnitude and adjust step size
      Nstp = Nstp+1
      IF ( (Err <= ONE).OR.(H <= Hmin) ) THEN !~~~> Accept step
         Nacc = Nacc+1
         CALL WCOPY(KPPNSP,Ynew,1,Y,1)
         T = T + Direction*H
         Hnew = MAX(Hmin,MIN(Hnew,Hmax))
         IF (RejectLastH) THEN  ! No step size increase after a rejected step
            Hnew = MIN(Hnew,H)
         END IF
         RejectLastH = .FALSE.
         RejectMoreH = .FALSE.
         H = Hnew
         EXIT UntilAccepted     ! EXIT THE LOOP: WHILE STEP NOT ACCEPTED
      ELSE                      !~~~> Reject step
         IF (RejectMoreH) THEN
            Hnew = H*FacRej
         END IF
         RejectMoreH = RejectLastH
         RejectLastH = .TRUE.
         H = Hnew
         IF (Nacc >= 1) THEN
            Nrej = Nrej+1
         END IF
      END IF                    ! Err <= 1

      END DO UntilAccepted

      END DO TimeLoop

C~~~  > Succesful exit
      IERR = 1                  !~~~> The integration was successful

      END SUBROUTINE ros_Integrator


C~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
      REAL(kind=dp) FUNCTION ros_ErrorNorm ( Y, Ynew, Yerr,  
     &     AbsTol, RelTol, VectorTol )
C~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
C~~~  > Computes the "scaled norm" of the error vector Yerr
C~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
      IMPLICIT NONE

C     Input arguments
      REAL(kind=dp), INTENT(IN) :: Y(KPPNSP), Ynew(KPPNSP),  
     &     Yerr(KPPNSP), AbsTol(KPPNSP), RelTol(KPPNSP)
      LOGICAL, INTENT(IN) ::  VectorTol
C     Local variables
      REAL(kind=dp) :: Err, Scale, Ymax
      INTEGER  :: i
      REAL(kind=dp), PARAMETER :: ZERO = 0.0_dp

      Err = ZERO
      DO i=1,KPPNSP
         Ymax = MAX(ABS(Y(i)),ABS(Ynew(i)))
         IF (VectorTol) THEN
            Scale = AbsTol(i)+RelTol(i)*Ymax
         ELSE
            Scale = AbsTol(1)+RelTol(1)*Ymax
         END IF
         Err = Err+(Yerr(i)/Scale)**2
      END DO
      Err  = SQRT(Err/KPPNSP)
      
      ros_ErrorNorm = Err
      
      END FUNCTION ros_ErrorNorm


C~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
C     SUBROUTINE ros_FunTimeDerivative ( T, Roundoff, Y,  
C     Fcn0, dFdT )
C~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
C~~~  > The time partial derivative of the function by finite differences
C~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
C     IMPLICIT NONE

C~~~  > Input arguments
C     REAL(kind=dp), INTENT(IN) :: T, Roundoff, Y(KPPNSP), Fcn0(KPPNSP)
C~~~  > Output arguments
C     REAL(kind=dp), INTENT(OUT) :: dFdT(KPPNSP)
C~~~  > Local variables
C     REAL(kind=dp) :: Delta
C     REAL(kind=dp), PARAMETER :: ONE = 1.0_dp, DeltaMin = 1.0E-6_dp

C     Delta = SQRT(Roundoff)*MAX(DeltaMin,ABS(T))
C     CALL FunTemplate(T+Delta,Y,dFdT)
C     CALL WAXPY(KPPNSP,(-ONE),Fcn0,1,dFdT,1)
C     CALL WSCAL(KPPNSP,(ONE/Delta),dFdT,1)

C     END SUBROUTINE ros_FunTimeDerivative


C~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
      SUBROUTINE ros_PrepareMatrix ( H, Direction, gam,  
     &     Jac0, Ghimj, Pivot, Singular )
C     --- --- --- --- --- --- --- --- --- --- --- --- ---
C     Prepares the LHS matrix for stage calculations
C     1.  Construct Ghimj = 1/(H*ham) - Jac0
C     "(Gamma H) Inverse Minus Jacobian"
C     2.  Repeat LU decomposition of Ghimj until successful.
C     -half the step size if LU decomposition fails and retry
C     -exit after 5 consecutive fails
C     --- --- --- --- --- --- --- --- --- --- --- --- ---
C     USE KPP_Pars
C     USE KPP_LinAlg
      IMPLICIT NONE

C~~~  > Input arguments
C     #ifdef FULL_ALGEBRA    
C     REAL(kind=dp), INTENT(IN) ::  Jac0(KPPNSP,KPPNSP)
C     #else
      REAL(kind=dp), INTENT(IN) ::  Jac0(LU_NONZERO)
C     #endif   
      REAL(kind=dp), INTENT(IN) ::  gam
      INTEGER, INTENT(IN) ::  Direction
C~~~  > Output arguments
C     #ifdef FULL_ALGEBRA    
C     REAL(kind=dp), INTENT(OUT) :: Ghimj(KPPNSP,KPPNSP)
C     #else
      REAL(kind=dp), INTENT(OUT) :: Ghimj(LU_NONZERO)
C     #endif   
      LOGICAL, INTENT(OUT) ::  Singular
      INTEGER, INTENT(OUT) ::  Pivot(KPPNSP)
C~~~  > Inout arguments
      REAL(kind=dp), INTENT(INOUT) :: H ! step size is decreased when LU fails
C~~~  > Local variables
      INTEGER  :: i, ising, Nconsecutive
      REAL(kind=dp) :: ghinv
      REAL(kind=dp), PARAMETER :: ONE  = 1.0_dp, HALF = 0.5_dp

      Nconsecutive = 0
      Singular = .TRUE.

      DO WHILE (Singular)

C~~~  >    Construct Ghimj = 1/(H*gam) - Jac0
C     #ifdef FULL_ALGEBRA    
C     CALL WCOPY(KPPNSP*KPPNSP,Jac0,1,Ghimj,1)
C     CALL WSCAL(KPPNSP*KPPNSP,(-ONE),Ghimj,1)
C     ghinv = ONE/(Direction*H*gam)
C     DO i=1,KPPNSP
C     Ghimj(i,i) = Ghimj(i,i)+ghinv
C     END DO
C     #else
         CALL WCOPY(LU_NONZERO,Jac0,1,Ghimj,1)
         CALL WSCAL(LU_NONZERO,(-ONE),Ghimj,1)
         ghinv = ONE/(Direction*H*gam)
         DO i=1,KPPNSP
            Ghimj(LU_DIAG(i)) = Ghimj(LU_DIAG(i))+ghinv
         END DO
C     #endif   
C~~~  >    Compute LU decomposition
         CALL ros_Decomp( Ghimj, Pivot, ising )
         IF (ising == 0) THEN
C~~~  >    If successful done
            Singular = .FALSE.
         ELSE ! ising .ne. 0
C~~~  >    If unsuccessful half the step size; if 5 consecutive fails then return
            Nsng = Nsng+1
            Nconsecutive = Nconsecutive+1
            Singular = .TRUE.
            PRINT*,'Warning: LU Decomposition returned ising = ',ising
            IF (Nconsecutive <= 5) THEN ! Less than 5 consecutive failed decompositions
               H = H*HALF
            ELSE                ! More than 5 consecutive failed decompositions
               RETURN
            END IF              ! Nconsecutive
         END IF                 ! ising
         
      END DO                    ! WHILE Singular
      
      END SUBROUTINE ros_PrepareMatrix
      

C~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
      SUBROUTINE ros_Decomp( A, Pivot, ising )
C~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
C     Template for the LU decomposition
C~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
      IMPLICIT NONE
C~~~  > Inout variables
      REAL(kind=dp), INTENT(INOUT) :: A(LU_NONZERO)
C~~~  > Output variables
      INTEGER, INTENT(OUT) :: Pivot(KPPNSP), ising

C     #ifdef FULL_ALGEBRA    
C     CALL  DGETRF( KPPNSP, KPPNSP, A, KPPNSP, Pivot, ising )
C     #else   
      CALL KppDecomp ( A, ising )
      Pivot(1) = 1
C     #endif
      Ndec = Ndec + 1

      END SUBROUTINE ros_Decomp


C~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
      SUBROUTINE ros_Solve( A, Pivot, b )
C~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
C     Template for the forward/backward substitution (using pre-computed LU decomposition)
C~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
C     USE KPP_Pars
      IMPLICIT NONE
C~~~  > Input variables
      REAL(kind=dp), INTENT(IN) :: A(LU_NONZERO)
      INTEGER, INTENT(IN) :: Pivot(KPPNSP)
C~~~  > InOut variables
      REAL(kind=dp), INTENT(INOUT) :: b(KPPNSP)

C     #ifdef FULL_ALGEBRA    
C     CALL  DGETRS( 'N', KPPNSP , 1, A, KPPNSP, Pivot, b, KPPNSP, 0 )
C     #else   
      CALL KppSolve( A, b )
C     #endif

      Nsol = Nsol+1

      END SUBROUTINE ros_Solve



C~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
      SUBROUTINE Ros2 (ros_S,ros_A,ros_C,ros_M,ros_E,ros_Alpha, 
     &     ros_Gamma,ros_NewF,ros_ELO,ros_Name)
C~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
C     --- AN L-STABLE METHOD, 2 stages, order 2
C~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

      IMPLICIT NONE

      INTEGER, PARAMETER :: S=2
      INTEGER, INTENT(OUT) ::  ros_S
      REAL(kind=dp), DIMENSION(S), INTENT(OUT) :: ros_M,ros_E,ros_Alpha,ros_Gamma
      REAL(kind=dp), DIMENSION(S*(S-1)/2), INTENT(OUT) :: ros_A, ros_C
      REAL(kind=dp), INTENT(OUT) :: ros_ELO
      LOGICAL, DIMENSION(S), INTENT(OUT) :: ros_NewF
      CHARACTER(LEN=12), INTENT(OUT) :: ros_Name
      DOUBLE PRECISION g

      g = 1.0_dp + 1.0_dp/SQRT(2.0_dp)

C~~~  > Name of the method
      ros_Name = 'ROS-2'
C~~~  > Number of stages
      ros_S = S

C~~~  > The coefficient matrices A and C are strictly lower triangular.
C     The lower triangular (subdiagonal) elements are stored in row-wise order:
C     A(2,1) = ros_A(1), A(3,1)=ros_A(2), A(3,2)=ros_A(3), etc.
C     The general mapping formula is:
C     A(i,j) = ros_A( (i-1)*(i-2)/2 + j )
C     C(i,j) = ros_C( (i-1)*(i-2)/2 + j )

      ros_A(1) = (1.0_dp)/g
      ros_C(1) = (-2.0_dp)/g
C~~~  > Does the stage i require a new function evaluation (ros_NewF(i)=TRUE)
C     or does it re-use the function evaluation from stage i-1 (ros_NewF(i)=FALSE)
      ros_NewF(1) = .TRUE.
      ros_NewF(2) = .TRUE.
C~~~  > M_i = Coefficients for new step solution
      ros_M(1)= (3.0_dp)/(2.0_dp*g)
      ros_M(2)= (1.0_dp)/(2.0_dp*g)
C     E_i = Coefficients for error estimator
      ros_E(1) = 1.0_dp/(2.0_dp*g)
      ros_E(2) = 1.0_dp/(2.0_dp*g)
C~~~  > ros_ELO = estimator of local order - the minimum between the
C     main and the embedded scheme orders plus one
      ros_ELO = 2.0_dp
C~~~  > Y_stage_i ~ Y( T + H*Alpha_i )
      ros_Alpha(1) = 0.0_dp
      ros_Alpha(2) = 1.0_dp
C~~~  > Gamma_i = \sum_j  gamma_{i,j}
      ros_Gamma(1) = g
      ros_Gamma(2) =-g

      END SUBROUTINE Ros2


C~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
      SUBROUTINE Ros3 (ros_S,ros_A,ros_C,ros_M,ros_E,ros_Alpha, 
     &     ros_Gamma,ros_NewF,ros_ELO,ros_Name)
C~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
C     --- AN L-STABLE METHOD, 3 stages, order 3, 2 function evaluations
C~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

      IMPLICIT NONE

      INTEGER, PARAMETER :: S=3
      INTEGER, INTENT(OUT) ::  ros_S
      REAL(kind=dp), DIMENSION(S), INTENT(OUT) :: ros_M,ros_E,ros_Alpha,ros_Gamma
      REAL(kind=dp), DIMENSION(S*(S-1)/2), INTENT(OUT) :: ros_A, ros_C
      REAL(kind=dp), INTENT(OUT) :: ros_ELO
      LOGICAL, DIMENSION(S), INTENT(OUT) :: ros_NewF
      CHARACTER(LEN=12), INTENT(OUT) :: ros_Name

C~~~  > Name of the method
      ros_Name = 'ROS-3'
C~~~  > Number of stages
      ros_S = S

C~~~  > The coefficient matrices A and C are strictly lower triangular.
C     The lower triangular (subdiagonal) elements are stored in row-wise order:
C     A(2,1) = ros_A(1), A(3,1)=ros_A(2), A(3,2)=ros_A(3), etc.
C     The general mapping formula is:
C     A(i,j) = ros_A( (i-1)*(i-2)/2 + j )
C     C(i,j) = ros_C( (i-1)*(i-2)/2 + j )

      ros_A(1)= 1.0_dp
      ros_A(2)= 1.0_dp
      ros_A(3)= 0.0_dp

      ros_C(1) = -0.10156171083877702091975600115545E+01_dp
      ros_C(2) =  0.40759956452537699824805835358067E+01_dp
      ros_C(3) =  0.92076794298330791242156818474003E+01_dp
C~~~  > Does the stage i require a new function evaluation (ros_NewF(i)=TRUE)
C     or does it re-use the function evaluation from stage i-1 (ros_NewF(i)=FALSE)
      ros_NewF(1) = .TRUE.
      ros_NewF(2) = .TRUE.
      ros_NewF(3) = .FALSE.
C~~~  > M_i = Coefficients for new step solution
      ros_M(1) =  0.1E+01_dp
      ros_M(2) =  0.61697947043828245592553615689730E+01_dp
      ros_M(3) = -0.42772256543218573326238373806514E+00_dp
C     E_i = Coefficients for error estimator
      ros_E(1) =  0.5E+00_dp
      ros_E(2) = -0.29079558716805469821718236208017E+01_dp
      ros_E(3) =  0.22354069897811569627360909276199E+00_dp
C~~~  > ros_ELO = estimator of local order - the minimum between the
C     main and the embedded scheme orders plus 1
      ros_ELO = 3.0_dp
C~~~  > Y_stage_i ~ Y( T + H*Alpha_i )
      ros_Alpha(1)= 0.0E+00_dp
      ros_Alpha(2)= 0.43586652150845899941601945119356E+00_dp
      ros_Alpha(3)= 0.43586652150845899941601945119356E+00_dp
C~~~  > Gamma_i = \sum_j  gamma_{i,j}
      ros_Gamma(1)= 0.43586652150845899941601945119356E+00_dp
      ros_Gamma(2)= 0.24291996454816804366592249683314E+00_dp
      ros_Gamma(3)= 0.21851380027664058511513169485832E+01_dp

      END SUBROUTINE Ros3

C~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~


C~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
      SUBROUTINE Ros4 (ros_S,ros_A,ros_C,ros_M,ros_E,ros_Alpha, 
     &     ros_Gamma,ros_NewF,ros_ELO,ros_Name)
C~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
C     L-STABLE ROSENBROCK METHOD OF ORDER 4, WITH 4 STAGES
C     L-STABLE EMBEDDED ROSENBROCK METHOD OF ORDER 3
C     
C     E. HAIRER AND G. WANNER, SOLVING ORDINARY DIFFERENTIAL
C     EQUATIONS II. STIFF AND DIFFERENTIAL-ALGEBRAIC PROBLEMS.
C     SPRINGER SERIES IN COMPUTATIONAL MATHEMATICS,
C     SPRINGER-VERLAG (1990)
C~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

      IMPLICIT NONE

      INTEGER, PARAMETER :: S=4
      INTEGER, INTENT(OUT) ::  ros_S
      REAL(kind=dp), DIMENSION(4), INTENT(OUT) :: ros_M,ros_E,ros_Alpha,ros_Gamma
      REAL(kind=dp), DIMENSION(6), INTENT(OUT) :: ros_A, ros_C
      REAL(kind=dp), INTENT(OUT) :: ros_ELO
      LOGICAL, DIMENSION(4), INTENT(OUT) :: ros_NewF
      CHARACTER(LEN=12), INTENT(OUT) :: ros_Name
      DOUBLE PRECISION g

C~~~  > Name of the method
      ros_Name = 'ROS-4'
C~~~  > Number of stages
      ros_S = S

C~~~  > The coefficient matrices A and C are strictly lower triangular.
C     The lower triangular (subdiagonal) elements are stored in row-wise order:
C     A(2,1) = ros_A(1), A(3,1)=ros_A(2), A(3,2)=ros_A(3), etc.
C     The general mapping formula is:
C     A(i,j) = ros_A( (i-1)*(i-2)/2 + j )
C     C(i,j) = ros_C( (i-1)*(i-2)/2 + j )

      ros_A(1) = 0.2000000000000000E+01_dp
      ros_A(2) = 0.1867943637803922E+01_dp
      ros_A(3) = 0.2344449711399156E+00_dp
      ros_A(4) = ros_A(2)
      ros_A(5) = ros_A(3)
      ros_A(6) = 0.0_dp

      ros_C(1) =-0.7137615036412310E+01_dp
      ros_C(2) = 0.2580708087951457E+01_dp
      ros_C(3) = 0.6515950076447975E+00_dp
      ros_C(4) =-0.2137148994382534E+01_dp
      ros_C(5) =-0.3214669691237626E+00_dp
      ros_C(6) =-0.6949742501781779E+00_dp
C~~~  > Does the stage i require a new function evaluation (ros_NewF(i)=TRUE)
C     or does it re-use the function evaluation from stage i-1 (ros_NewF(i)=FALSE)
      ros_NewF(1)  = .TRUE.
      ros_NewF(2)  = .TRUE.
      ros_NewF(3)  = .TRUE.
      ros_NewF(4)  = .FALSE.
C~~~  > M_i = Coefficients for new step solution
      ros_M(1) = 0.2255570073418735E+01_dp
      ros_M(2) = 0.2870493262186792E+00_dp
      ros_M(3) = 0.4353179431840180E+00_dp
      ros_M(4) = 0.1093502252409163E+01_dp
C~~~  > E_i  = Coefficients for error estimator
      ros_E(1) =-0.2815431932141155E+00_dp
      ros_E(2) =-0.7276199124938920E-01_dp
      ros_E(3) =-0.1082196201495311E+00_dp
      ros_E(4) =-0.1093502252409163E+01_dp
C~~~  > ros_ELO  = estimator of local order - the minimum between the
C     main and the embedded scheme orders plus 1
      ros_ELO  = 4.0_dp
C~~~  > Y_stage_i ~ Y( T + H*Alpha_i )
      ros_Alpha(1) = 0.0_dp
      ros_Alpha(2) = 0.1145640000000000E+01_dp
      ros_Alpha(3) = 0.6552168638155900E+00_dp
      ros_Alpha(4) = ros_Alpha(3)
C~~~  > Gamma_i = \sum_j  gamma_{i,j}
      ros_Gamma(1) = 0.5728200000000000E+00_dp
      ros_Gamma(2) =-0.1769193891319233E+01_dp
      ros_Gamma(3) = 0.7592633437920482E+00_dp
      ros_Gamma(4) =-0.1049021087100450E+00_dp

      END SUBROUTINE Ros4

C~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
      SUBROUTINE Rodas3 (ros_S,ros_A,ros_C,ros_M,ros_E,ros_Alpha, 
     &     ros_Gamma,ros_NewF,ros_ELO,ros_Name)
C~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
C     --- A STIFFLY-STABLE METHOD, 4 stages, order 3
C~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

      IMPLICIT NONE

      INTEGER, PARAMETER :: S=4
      INTEGER, INTENT(OUT) ::  ros_S
      REAL(kind=dp), DIMENSION(S), INTENT(OUT) :: ros_M,ros_E,ros_Alpha,ros_Gamma
      REAL(kind=dp), DIMENSION(S*(S-1)/2), INTENT(OUT) :: ros_A, ros_C
      REAL(kind=dp), INTENT(OUT) :: ros_ELO
      LOGICAL, DIMENSION(S), INTENT(OUT) :: ros_NewF
      CHARACTER(LEN=12), INTENT(OUT) :: ros_Name
      DOUBLE PRECISION g

C~~~  > Name of the method
      ros_Name = 'RODAS-3'
C~~~  > Number of stages
      ros_S = S

C~~~  > The coefficient matrices A and C are strictly lower triangular.
C     The lower triangular (subdiagonal) elements are stored in row-wise order:
C     A(2,1) = ros_A(1), A(3,1)=ros_A(2), A(3,2)=ros_A(3), etc.
C     The general mapping formula is:
C     A(i,j) = ros_A( (i-1)*(i-2)/2 + j )
C     C(i,j) = ros_C( (i-1)*(i-2)/2 + j )

      ros_A(1) = 0.0E+00_dp
      ros_A(2) = 2.0E+00_dp
      ros_A(3) = 0.0E+00_dp
      ros_A(4) = 2.0E+00_dp
      ros_A(5) = 0.0E+00_dp
      ros_A(6) = 1.0E+00_dp

      ros_C(1) = 4.0E+00_dp
      ros_C(2) = 1.0E+00_dp
      ros_C(3) =-1.0E+00_dp
      ros_C(4) = 1.0E+00_dp
      ros_C(5) =-1.0E+00_dp
      ros_C(6) =-(8.0E+00_dp/3.0E+00_dp)

C~~~  > Does the stage i require a new function evaluation (ros_NewF(i)=TRUE)
C     or does it re-use the function evaluation from stage i-1 (ros_NewF(i)=FALSE)
      ros_NewF(1)  = .TRUE.
      ros_NewF(2)  = .FALSE.
      ros_NewF(3)  = .TRUE.
      ros_NewF(4)  = .TRUE.
C~~~  > M_i = Coefficients for new step solution
      ros_M(1) = 2.0E+00_dp
      ros_M(2) = 0.0E+00_dp
      ros_M(3) = 1.0E+00_dp
      ros_M(4) = 1.0E+00_dp
C~~~  > E_i  = Coefficients for error estimator
      ros_E(1) = 0.0E+00_dp
      ros_E(2) = 0.0E+00_dp
      ros_E(3) = 0.0E+00_dp
      ros_E(4) = 1.0E+00_dp
C~~~  > ros_ELO  = estimator of local order - the minimum between the
C     main and the embedded scheme orders plus 1
      ros_ELO  = 3.0E+00_dp
C~~~  > Y_stage_i ~ Y( T + H*Alpha_i )
      ros_Alpha(1) = 0.0E+00_dp
      ros_Alpha(2) = 0.0E+00_dp
      ros_Alpha(3) = 1.0E+00_dp
      ros_Alpha(4) = 1.0E+00_dp
C~~~  > Gamma_i = \sum_j  gamma_{i,j}
      ros_Gamma(1) = 0.5E+00_dp
      ros_Gamma(2) = 1.5E+00_dp
      ros_Gamma(3) = 0.0E+00_dp
      ros_Gamma(4) = 0.0E+00_dp

      END SUBROUTINE Rodas3

C~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
      SUBROUTINE Rodas4 (ros_S,ros_A,ros_C,ros_M,ros_E,ros_Alpha, 
     &     ros_Gamma,ros_NewF,ros_ELO,ros_Name)
C~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
C     STIFFLY-STABLE ROSENBROCK METHOD OF ORDER 4, WITH 6 STAGES
C     
C     E. HAIRER AND G. WANNER, SOLVING ORDINARY DIFFERENTIAL
C     EQUATIONS II. STIFF AND DIFFERENTIAL-ALGEBRAIC PROBLEMS.
C     SPRINGER SERIES IN COMPUTATIONAL MATHEMATICS,
C     SPRINGER-VERLAG (1996)
C~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

      IMPLICIT NONE

      INTEGER, PARAMETER :: S=6
      INTEGER, INTENT(OUT) ::  ros_S
      REAL(kind=dp), DIMENSION(S), INTENT(OUT) :: ros_M,ros_E,ros_Alpha,ros_Gamma
      REAL(kind=dp), DIMENSION(S*(S-1)/2), INTENT(OUT) :: ros_A, ros_C
      REAL(kind=dp), INTENT(OUT) :: ros_ELO
      LOGICAL, DIMENSION(S), INTENT(OUT) :: ros_NewF
      CHARACTER(LEN=12), INTENT(OUT) :: ros_Name
      DOUBLE PRECISION g

C~~~  > Name of the method
      ros_Name = 'RODAS-4'
C~~~  > Number of stages
      ros_S = 6

C~~~  > Y_stage_i ~ Y( T + H*Alpha_i )
      ros_Alpha(1) = 0.000_dp
      ros_Alpha(2) = 0.386_dp
      ros_Alpha(3) = 0.210_dp
      ros_Alpha(4) = 0.630_dp
      ros_Alpha(5) = 1.000_dp
      ros_Alpha(6) = 1.000_dp

C~~~  > Gamma_i = \sum_j  gamma_{i,j}
      ros_Gamma(1) = 0.2500000000000000E+00_dp
      ros_Gamma(2) =-0.1043000000000000E+00_dp
      ros_Gamma(3) = 0.1035000000000000E+00_dp
      ros_Gamma(4) =-0.3620000000000023E-01_dp
      ros_Gamma(5) = 0.0_dp
      ros_Gamma(6) = 0.0_dp

C~~~  > The coefficient matrices A and C are strictly lower triangular.
C     The lower triangular (subdiagonal) elements are stored in row-wise order:
C     A(2,1) = ros_A(1), A(3,1)=ros_A(2), A(3,2)=ros_A(3), etc.
C     The general mapping formula is:  A(i,j) = ros_A( (i-1)*(i-2)/2 + j )
C     C(i,j) = ros_C( (i-1)*(i-2)/2 + j )

      ros_A(1) = 0.1544000000000000E+01_dp
      ros_A(2) = 0.9466785280815826E+00_dp
      ros_A(3) = 0.2557011698983284E+00_dp
      ros_A(4) = 0.3314825187068521E+01_dp
      ros_A(5) = 0.2896124015972201E+01_dp
      ros_A(6) = 0.9986419139977817E+00_dp
      ros_A(7) = 0.1221224509226641E+01_dp
      ros_A(8) = 0.6019134481288629E+01_dp
      ros_A(9) = 0.1253708332932087E+02_dp
      ros_A(10) =-0.6878860361058950E+00_dp
      ros_A(11) = ros_A(7)
      ros_A(12) = ros_A(8)
      ros_A(13) = ros_A(9)
      ros_A(14) = ros_A(10)
      ros_A(15) = 1.0E+00_dp

      ros_C(1) =-0.5668800000000000E+01_dp
      ros_C(2) =-0.2430093356833875E+01_dp
      ros_C(3) =-0.2063599157091915E+00_dp
      ros_C(4) =-0.1073529058151375E+00_dp
      ros_C(5) =-0.9594562251023355E+01_dp
      ros_C(6) =-0.2047028614809616E+02_dp
      ros_C(7) = 0.7496443313967647E+01_dp
      ros_C(8) =-0.1024680431464352E+02_dp
      ros_C(9) =-0.3399990352819905E+02_dp
      ros_C(10) = 0.1170890893206160E+02_dp
      ros_C(11) = 0.8083246795921522E+01_dp
      ros_C(12) =-0.7981132988064893E+01_dp
      ros_C(13) =-0.3152159432874371E+02_dp
      ros_C(14) = 0.1631930543123136E+02_dp
      ros_C(15) =-0.6058818238834054E+01_dp

C~~~  > M_i = Coefficients for new step solution
      ros_M(1) = ros_A(7)
      ros_M(2) = ros_A(8)
      ros_M(3) = ros_A(9)
      ros_M(4) = ros_A(10)
      ros_M(5) = 1.0E+00_dp
      ros_M(6) = 1.0E+00_dp

C~~~  > E_i  = Coefficients for error estimator
      ros_E(1) = 0.0E+00_dp
      ros_E(2) = 0.0E+00_dp
      ros_E(3) = 0.0E+00_dp
      ros_E(4) = 0.0E+00_dp
      ros_E(5) = 0.0E+00_dp
      ros_E(6) = 1.0E+00_dp

C~~~  > Does the stage i require a new function evaluation (ros_NewF(i)=TRUE)
C     or does it re-use the function evaluation from stage i-1 (ros_NewF(i)=FALSE)
      ros_NewF(1) = .TRUE.
      ros_NewF(2) = .TRUE.
      ros_NewF(3) = .TRUE.
      ros_NewF(4) = .TRUE.
      ros_NewF(5) = .TRUE.
      ros_NewF(6) = .TRUE.

C~~~  > ros_ELO  = estimator of local order - the minimum between the
C     main and the embedded scheme orders plus 1
      ros_ELO = 4.0_dp

      END SUBROUTINE Rodas4

C~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
C     End of the set of internal Rosenbrock subroutines
C~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
      END SUBROUTINE Rosenbrock
C~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~


C~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
      SUBROUTINE FunTemplate( Y, RKI, Ydot )
C~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
C     Template for the ODE function call.
C     Updates the rate coefficients (and possibly the fixed species) at each call
C~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
C     USE KPP_Pars
C     USE KPP_Glob
C     USE KPP_Function
C     ! USE CMAQ_CB4_Rates
C~~~  > Input variables
      REAL(kind=dp) :: Y(KPPNSP), RKI(KPPNRCT)
C~~~  > Output variables
      REAL(kind=dp) :: Ydot(KPPNSP)
C~~~  > Local variables
      REAL(kind=dp) :: Told

      CALL Fun( Y, RKI, Ydot )

      Nfun = Nfun+1

      END SUBROUTINE FunTemplate


C~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
      SUBROUTINE JacTemplate( Y, RKI, Jcb )
C~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
C     Template for the ODE Jacobian call.
C     Updates the rate coefficients (and possibly the fixed species) at each call
C~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
C     USE KPP_Pars
C     USE KPP_Glob
C     USE KPP_Jacobian
C     USE KPP_LinAlg
C     C USE CMAQ_CB4_Rates
C~~~  > Input variables
      REAL(kind=dp) :: Y(KPPNSP), RKI(KPPNRCT)
C~~~  > Output variables
C     #ifdef FULL_ALGEBRA    
C     REAL(kind=dp) :: JV(LU_NONZERO), Jcb(KPPNSP,KPPNSP)
C     #else
      REAL(kind=dp) :: Jcb(LU_NONZERO)
C     #endif   
C~~~  > Local variables
      REAL(kind=dp) :: Told
C     #ifdef FULL_ALGEBRA    
C     INTEGER :: i, j
C     #endif   

C     #ifdef FULL_ALGEBRA    
C     CALL Jac_SP(Y, RKI, JV)
C     DO j=1,KPPNSP
C     DO i=1,KPPNSP
C     Jcb(i,j) = 0.0d0
C     END DO
C     END DO
C     DO i=1,LU_NONZERO
C     Jcb(LU_IROW(i),LU_ICOL(i)) = JV(i)
C     END DO
C     #else
      CALL Jac_SP( Y, RKI, Jcb )
C     #endif   

      Njac = Njac+1

      END SUBROUTINE JacTemplate

      END MODULE KPP_Integrator

C     ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

